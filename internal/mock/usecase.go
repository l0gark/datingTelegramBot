// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/Eretic431/datingTelegramBot/internal/data/models"
	v5 "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// HandleCommandNext mocks base method.
func (m *MockUsecase) HandleCommandNext(arg0 context.Context, arg1 int64, arg2 *models.User) (v5.Chattable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCommandNext", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.Chattable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCommandNext indicates an expected call of HandleCommandNext.
func (mr *MockUsecaseMockRecorder) HandleCommandNext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCommandNext", reflect.TypeOf((*MockUsecase)(nil).HandleCommandNext), arg0, arg1, arg2)
}

// HandleFillingProfile mocks base method.
func (m *MockUsecase) HandleFillingProfile(arg0 context.Context, arg1 string, arg2 int64, arg3 string, arg4 *models.User) (v5.Chattable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFillingProfile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(v5.Chattable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleFillingProfile indicates an expected call of HandleFillingProfile.
func (mr *MockUsecaseMockRecorder) HandleFillingProfile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFillingProfile", reflect.TypeOf((*MockUsecase)(nil).HandleFillingProfile), arg0, arg1, arg2, arg3, arg4)
}

// HandleProfile mocks base method.
func (m *MockUsecase) HandleProfile(arg0 context.Context, arg1 *v5.Message, arg2 *models.User) (v5.MessageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(v5.MessageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleProfile indicates an expected call of HandleProfile.
func (mr *MockUsecaseMockRecorder) HandleProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProfile", reflect.TypeOf((*MockUsecase)(nil).HandleProfile), arg0, arg1, arg2)
}

// HandleStart mocks base method.
func (m *MockUsecase) HandleStart(arg0 context.Context, arg1 *v5.Message, arg2 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleStart", arg0, arg1, arg2)
}

// HandleStart indicates an expected call of HandleStart.
func (mr *MockUsecaseMockRecorder) HandleStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStart", reflect.TypeOf((*MockUsecase)(nil).HandleStart), arg0, arg1, arg2)
}

// IsStarted mocks base method.
func (m *MockUsecase) IsStarted(arg0 context.Context, arg1 *v5.Message) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStarted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsStarted indicates an expected call of IsStarted.
func (mr *MockUsecaseMockRecorder) IsStarted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockUsecase)(nil).IsStarted), arg0, arg1)
}
