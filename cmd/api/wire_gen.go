// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Eretic431/datingTelegramBot/internal/data/postgres"
	"github.com/Eretic431/datingTelegramBot/internal/usecase"
)

// Injectors from wire.go:

func initApp() (*application, func(), error) {
	mainConfig, err := getConfig()
	if err != nil {
		return nil, nil, err
	}
	sugaredLogger, cleanup, err := newLogger(mainConfig)
	if err != nil {
		return nil, nil, err
	}
	postgresConfig := newPostgresConfig(mainConfig, sugaredLogger)
	pgxPoolIface, cleanup2, err := postgres.NewPsqlPool(postgresConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	usersRepository := postgres.NewUserRepository(pgxPoolIface)
	likesRepository := postgres.NewLikeRepository(pgxPoolIface)
	botAPI, err := newTgBot(mainConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	internalUsecase := usecase.NewUsecase(usersRepository, likesRepository, botAPI, sugaredLogger)
	userRepository := &postgres.UserRepository{
		DB: pgxPoolIface,
	}
	likeRepository := &postgres.LikeRepository{
		DB: pgxPoolIface,
	}
	updatesChannel := newTgBotUpdatesChan(botAPI)
	mainApplication := &application{
		config:  mainConfig,
		usecase: internalUsecase,
		log:     sugaredLogger,
		users:   userRepository,
		likes:   likeRepository,
		bot:     botAPI,
		updates: updatesChannel,
	}
	return mainApplication, func() {
		cleanup2()
		cleanup()
	}, nil
}
