// Code generated by MockGen. DO NOT EDIT.
// Source: likes_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/Eretic431/datingTelegramBot/internal/data/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLikesRepository is a mock of LikesRepository interface.
type MockLikesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikesRepositoryMockRecorder
}

// MockLikesRepositoryMockRecorder is the mock recorder for MockLikesRepository.
type MockLikesRepositoryMockRecorder struct {
	mock *MockLikesRepository
}

// NewMockLikesRepository creates a new mock instance.
func NewMockLikesRepository(ctrl *gomock.Controller) *MockLikesRepository {
	mock := &MockLikesRepository{ctrl: ctrl}
	mock.recorder = &MockLikesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikesRepository) EXPECT() *MockLikesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLikesRepository) Add(arg0 context.Context, arg1 *models.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLikesRepositoryMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLikesRepository)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockLikesRepository) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLikesRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLikesRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockLikesRepository) Get(arg0 context.Context, arg1, arg2 string) (*models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLikesRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLikesRepository)(nil).Get), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockLikesRepository) Update(arg0 context.Context, arg1 *models.Like) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLikesRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLikesRepository)(nil).Update), arg0, arg1)
}
